{"version":3,"sources":["Login/Login.js","Data/Data.js","App.js","serviceWorker.js","index.js"],"names":["login","props","react_default","a","createElement","className","htmlFor","type","id","name","onChange","emailChange","value","email","passwordChange","password","tableNameChange","tableName","error","onClick","loginClick","CreateUserClick","data","disabled","api","defaultValue","current","currentIdChange","generateClick","resetClick","App","state","loginDataEmail","loginPassword","loginTableName","serviceEmail","serviceApiKey","serviceCurrentId","emailChangedHandler","event","_this","setState","target","passwordChangedHandler","tableNameChangedHandler","currentIdChangedHandler","createUserHandler","_callee","response","json","status","regenerator_default","wrap","_context","prev","next","fetch","proxyurl","method","body","JSON","stringify","headers","Content-Type","sent","console","log","apiKey","currentHandler","stop","this","loginHandler","_callee2","_context2","_callee3","_context3","nextHandler","_callee4","_context4","resetHandler","_callee5","url","_context5","Login_Login","Data_Data","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69bc974d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Login.css'\r\n\r\nconst login = (props) => {\r\n    return <div className=\"Login\">\r\n        <form>\r\n            <div>\r\n                <label htmlFor=\"mail\">E-mail</label>\r\n            </div>\r\n            <div>\r\n                <input className=\"Input\" type=\"email\" id=\"mail\" name=\"mail\" onChange={props.emailChange} value={props.email} />\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"pass\">Password</label>\r\n            </div>\r\n            <div>\r\n                <input type=\"password\" id=\"pass\" name=\"pass\" onChange={props.passwordChange} value={props.password} />\r\n            </div>\r\n            <div >\r\n                <label htmlFor=\"table\">Table Name</label>\r\n            </div>\r\n            <div>\r\n                <input type=\"text\" id=\"table\" name=\"table\" onChange={props.tableNameChange} value={props.tableName} />\r\n            </div>\r\n            <div>\r\n                <p id=\"errors\" name=\"errors\" value={props.error}/>\r\n            </div>\r\n            <div>\r\n                <button className=\"Button\" type=\"button\" onClick={props.loginClick} >Login</button>\r\n                <button className=\"Button\" type=\"button\" onClick={props.CreateUserClick} >Create User</button>\r\n            </div>\r\n        </form>\r\n    </div>;\r\n}\r\n\r\nexport default login;","import React from 'react';\r\nimport './Data.css'\r\n\r\nconst data = (props) => {\r\n    return <div className=\"Data\">\r\n        <div>\r\n            <label htmlFor=\"mail\">E-mail</label>\r\n        </div> \r\n        <div>\r\n            <input type=\"email\" id=\"mailData\" name=\"mailData\" value={props.email} disabled/>\r\n        </div>\r\n        <div>\r\n            <label htmlFor=\"api\">Api Key</label>\r\n        </div>\r\n        <div>\r\n            <input type=\"text\" id=\"api\" name=\"api\" value={props.api} disabled/>\r\n        </div>\r\n        <div>\r\n            <label htmlFor=\"current\" >Id in use</label>\r\n        </div>\r\n        <div>\r\n            <input type=\"number\" id=\"current\" name=\"current\" defaultValue={props.current} onChange={props.currentIdChange} />\r\n        </div>\r\n        <div>\r\n            <button className=\"Button\" type=\"button\" onClick={props.generateClick} >Get Next</button>\r\n            <button className=\"Button\" type=\"button\" onClick={props.resetClick} >Reset</button>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default data;","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './Login/Login';\nimport Data from './Data/Data';\n\nclass App extends Component {\n\n  state = { \n    loginDataEmail:'', loginPassword: '', loginTableName:'',\n    serviceEmail: '', serviceApiKey: '', serviceCurrentId: '',\n    error: \"\" \n  }\n\n  emailChangedHandler = (event) => {\n    this.setState({ loginDataEmail: event.target.value  });\n  }\n\n  passwordChangedHandler = (event) => {\n    this.setState({ loginPassword: event.target.value });\n  }\n\n  tableNameChangedHandler = (event) => {\n    this.setState({ loginTableName: event.target.value });\n  }\n\n  currentIdChangedHandler = (event) => {\n    this.setState({ serviceCurrentId: event.target.value });\n  }\n\n  createUserHandler = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://arcane-peak-14291.herokuapp.com/v1/new\";\n    const response = await fetch(proxyurl + url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: this.state.loginDataEmail,\n        password: this.state.loginPassword,\n        tableName: this.state.loginTableName\n      }),\n      headers:{ 'Content-Type': 'application/json' }\n    });\n    const json = await response.json()\n    const status = response.status;\n    console.log(status);\n    console.log(json);\n    if (status !== 202) {\n      console.log('error');\n      this.setState({ error: 'Error: ' + status });\n    } else {\n      console.log('success');\n      this.setState({ serviceEmail: this.state.loginDataEmail });\n      this.setState({ serviceApiKey: json.apiKey });\n      this.setState({ serviceEmail: this.state.loginDataEmail });\n      this.currentHandler();\n    }\n  }\n\n  loginHandler = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://arcane-peak-14291.herokuapp.com/v1/login\";\n    const response = await fetch(proxyurl + url, {\n      method: 'POST',\n      body: JSON.stringify({\n        email: this.state.loginDataEmail,\n        password: this.state.loginPassword,\n        tableName: this.state.loginTableName\n      }),\n      headers:{ 'Content-Type': 'application/json' }\n    });\n    const json = await response.json()\n    const status = response.status;\n    console.log(status);\n    console.log(json);\n    if (status !== 202) {\n      console.log('error');\n      this.setState({ error: 'Error: ' + status });\n    } else {\n      console.log('success');\n      this.setState({ serviceEmail: this.state.loginDataEmail });\n      this.setState({ serviceApiKey: json.apiKey });\n      this.currentHandler();\n    }\n  }\n\n  currentHandler = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://arcane-peak-14291.herokuapp.com/v1/current\";\n    const response = await fetch(proxyurl + url, {\n      method: 'POST',\n      body: JSON.stringify({\n        apiKey: this.state.serviceApiKey\n      }),\n      headers:{ 'Content-Type': 'application/json' }\n    });\n    const json = await response.json()\n    const status = response.status;\n    console.log(status);\n    console.log(json);\n\n    if (status !== 202) {\n      console.log('');\n      this.setState({ error: 'Error: ' + status });\n    } else {\n      console.log('success');\n      this.setState({ serviceCurrentId: json });\n    }\n  }\n\n  nextHandler = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://arcane-peak-14291.herokuapp.com/v1/next\";\n    const response = await fetch(proxyurl + url, {\n      method: 'POST',\n      body: JSON.stringify({\n        apiKey: this.state.serviceApiKey\n      }),\n      headers:{ 'Content-Type': 'application/json' }\n    });\n    const json = await response.json()\n    const status = response.status;\n    console.log(status);\n    console.log(json);\n\n    if (status !== 202) {\n      console.log('');\n      this.setState({ error: 'Error: ' + status });\n    } else {\n      console.log('success');\n      this.setState({ serviceCurrentId: json });\n    }\n  }\n\n  resetHandler = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://arcane-peak-14291.herokuapp.com/v1/reset?newId=\" + this.state.serviceCurrentId;\n    const response = await fetch(proxyurl + url, {\n      method: 'PUT',\n      body: JSON.stringify({\n        apiKey: this.state.serviceApiKey\n      }),\n      headers:{ 'Content-Type': 'application/json' }\n    });\n    const json = await response.json()\n    const status = response.status;\n    console.log(status);\n    console.log(json);\n\n    if (status !== 202) {\n      console.log('');\n      this.setState({ error: 'Error: ' + status });\n    } else {\n      console.log('success');\n      this.setState({ serviceCurrentId: json });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Id as a Service</h1>\n        <Login \n          email={this.state.loginDataEmail}\n          password={this.state.loginPassword}\n          tableName={this.state.loginTableName}\n          emailChange={this.emailChangedHandler} \n          passwordChange={this.passwordChangedHandler} \n          tableNameChange={this.tableNameChangedHandler}\n          error={this.state.error}\n          loginClick={this.loginHandler}\n          CreateUserClick={this.createUserHandler} />\n        <Data \n          email={this.state.serviceEmail}\n          api={this.state.serviceApiKey}\n          current={this.state.serviceCurrentId} \n          currentIdChange={this.currentIdChangedHandler} \n          generateClick={this.nextHandler}\n          resetClick={this.resetHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}